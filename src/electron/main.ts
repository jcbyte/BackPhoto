import { app, BrowserWindow } from "electron";
import path from "path";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
	app.quit();
}

export const DEV = !app.isPackaged;

let appReady = false;
export function isAppReady(): boolean {
	return appReady;
}

import "./api/backend";
import "./api/electron";
import { cleanup, startAdbServer, startPythonServer } from "./api/serverManager";
import "./api/storage";

const createWindow = async () => {
	// Create the browser window
	const mainWindow = new BrowserWindow({
		width: 1024,
		height: 700,
		minWidth: 704,
		minHeight: 644,
		icon: DEV
			? "./assets/icon.png"
			: path.join(process.resourcesPath, "assets", process.platform === "win32" ? "icon.ico" : "icon.png"),
		webPreferences: {
			preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
		},
	});

	// Hide the menu bar
	mainWindow.setMenuBarVisibility(false);

	// Load the index.html of the app
	mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

	if (DEV) {
		// Open DevTools
		mainWindow.webContents.openDevTools();
	}

	await startPythonServer();
	await startAdbServer();

	appReady = true;
	mainWindow.webContents.send("electron._appReady");
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
	if (process.platform !== "darwin") {
		app.quit();
	}
});

app.on("activate", () => {
	// On OS X it's common to re-create a window in the app when the
	// dock icon is clicked and there are no other windows open.
	if (BrowserWindow.getAllWindows().length === 0) {
		createWindow();
	}
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

// Kill servers when Electron quits
let isClean = false;
app.on("before-quit", async (event) => {
	if (!isClean) {
		event.preventDefault();
		cleanup().then(() => {
			isClean = true;
			app.quit();
		});
	}
});
